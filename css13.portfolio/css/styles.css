/* 
To remove any margin from all the elements or to override the default margins:
ul, h1-h6, p, etc... 
*/
* {
    margin: 0;
    padding: 0;
    /* 
    if you want to use this property frequently:
    all the padding will be included in the width
    */
    /* box-sizing: border-box;  */
  }

    /* style the body element */
body {
    /* font ==> any sans-serif ==> easy to read in computer screen */
    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;

    /* use the file "pattern.gif" as a background for the entire body element */
    /* background-image: url('../images/pattern.gif'); */
    /* to make the background fixed and not moving when we scroll up/down the page: */
    /* background-attachment: fixed; */
    /* The background-color will only work if the image is not loading */
    /* background-color:rgb(167, 170, 161); */
    /* background-repeat: no-repeat; */

    /* 
    Using the shorthand instead of writing 3 properties:
    */
    background: url('../images/pattern.gif') fixed rgb(167, 170, 161);

    /* 
    by default the font style and font weight are normal and the font-size is 16px
    but just in case if the user has modified their browser so we can enforce the default rules here 
    */

    /* Apply Normal Font */
    font-style: normal;
    /* Make sure that the font is NOT Bold */
    font-weight: normal;
    font-size: 16px; /* 100% => 1em = > 1rem which is the default */
  }

  div.wrapper {
    width: 1000px;
    /* padding-top: 23px; */
    /* centre the all page content "div.wrapper" */
    margin: 5px auto; /* 5px top/bottom and auto left/right */
    background-color: rgb(223, 222, 221);
}

/* 
style h1, h2, h3 by changing their size values 
we can also use em (for Capital M) 
Style the font size:
h1 => 2em
h2 => 1.5em
h3 => 1.2em

Please remember that by default <p> element size is "1em"
which is equal to 16px which is equal to 100%
*/
h1 {
    font-size: 2em;
}

h2 {
    font-size: 1.5em;
}

h3 {
    font-size: 1.2em;
    /*	
    we put 1.2em and NOT 1em? 
    because p element is 1em by default and we should make h3 a little bit larger than p */
}

h1,h2,h3 {
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
}


/* style h1, h2, h3, p 
margin of 5px (top and bottom)
margin of 0 (left and right)
*/
h1, h2, h3, p {
    /* for learning purpose we will repeat the rules 4 times:  */
    margin: 5px 5px 5px 5px;
    margin: 5px; /* top, bottom, left, and right all these side have a margin of 5px */
    margin: 5px 10px 7px 10px; /* top: 5px, right: 10px, bottom: 7px, left: 10px */
    margin: 5px 0; /* top/bottom: 5px and left/right: 0 */
  }

/* 
style the <header> element: 
- background image => biking.jpg
- bottom border with any style you like (width style color)
- make sure that the image is repeated horizontally only (Not vertically)
- make sure that the image is visible (header should not collapse) 

Note/Hint: 
remember that <header> element is empty (doesn't have any content), 
so any background image we add in the css will not be visible
unless if we set a height for this header element:
*/
header {
    background-image: url("../images/biking.jpg");
    /*     
         By default, the BG image will be repeated in x and y
    */
    background-repeat: repeat-x;
    border-bottom: 2px inset rgb(133, 106, 106);
    /* 
    when we add a background image with CSS,
    we need to specify the height 
    
    since the image height is 145px, we can set the same height for the header
    because the header is empty we need to specify its height,
    
    we can put the height based on the image dimensions which is the same value as the image height 
    */
  height: 145px; /* the same height of the image */
}

/* 
I want to style any li element in my page to have same margins:
*/
ul li {
    padding-left: 7px;
    margin-left: 30px;
}

/* 
Calculate the total width:
aside 200px + main 800px = 1000px the width of div.wrapper 
*/

  /* 
  In this situation using "display: inline-block;" 
  will not be a good choice although it is considered to be another way to make block elements sit beside each other
  like inline element but in this case using float property is better 
  (You can try it by yourself and see the result)
  display: inline-block;
  */


/*
style the aside HTML element that has a class named "sidebar"
<aside class="sidebar">
*/
aside.sidebar {
    background-color: #807B7B;
    color: rgb(247, 238, 238);
    width:200px;
    float: left;
    padding: 5px; /* 200px + 5px left + 5px right = 210px */

        /*	
	Important Note:
    To include the padding and the border within the element's total width and height:
    using CSS3 to add padding without changing the width ==> box-sizing: border-box;
  */
   box-sizing: border-box; /* all the padding will be included in the width */
}

/* 
style the main HTML element that has a class named "main-content"
<main class="main-content">
*/
main.main-content {
    background-color: rgb(245, 226, 226);
    width:800px;
    float: right;
    padding: 5px; /* 800px + 5px left + 5px right = 810px */
    /*	
    CSS3 Trick property to make the padding part of the width size of the current element 
    */
    box-sizing: border-box;
    /* this will make 800px includes the padding *//*	display: inline-block;*/
}

/* 
Style the iframe element to make it center: 
we can add audio and video
*/

iframe, video, audio {
    /* add 5 px for top and button, and it should margin auto for left and right */
    /* 
    In order to center any inline element with margin auto,
    we do have to make block-level element
     */
    display: block;
    margin: 5px auto;
    border: 2px groove #F1E9B5;
    padding: 3px;
}

/* ****************** Starting the form styles *********************** */
form {
    /* We will use  */
    background-color: rgb(243, 229, 202);
    /* 
    Note: Don't forget that <form> is a block-level element so we don't need display: block
    in order to give it a width value or to centre it

    the form will only take 90% of its container "the main element"
    */
    width: 90%;  
    padding: 5px; 
    margin: auto;
    border: 1px groove rgb(59, 80, 80);
}

/* 
Target the only the first label and the first input elements inside our form 

*/
form>label, form>input {
    display: block;
}

/* 
   styling any label that is inside form element
*/
form label {
    background-color: #5A5A56;
    color: #E4E4E2;
    width: 99%; 
    /* 
    The total: width 99% + border 4px + padding 10px 

    but with using CSS3: box-sizing: border-box;   
    all the extra padding and border size will be included with 99%
    */

    border: 2px solid #424141;
    margin: 20px 0 5px 0; /* top right bottom left */
        /* using CSS3 to add rounded corners */
    border-radius: 6px;
    padding: 5px; 
    box-sizing: border-box;   
}

/* 
style all input fields + textarea inside the form element
*/
form input, form textarea {
    /* extend their width to fill the form area like their labels */
    /* we can use border radius  */
    border-radius: 5px;
    padding: 5px;
    box-sizing: border-box;
    /* width: 99%; */
}

/*
 The problem:
   Style the input element of 
   type "text" and "email" or "password"
   in other word, we need to style all 
   the input element EXCEPT the input 
   of type "submit" and the input of type "reset".
   So we need to exclude the input of type "submit" and "reset"
*/

/* 
Solution 1: 
*/
form>input, form textarea {
    /* width: 99%; */
}

/* 
Solution 2: Long Way
*/
input[type="text"],
input[type="email"],
input[type="number"],
input[type="date"],
input[type="password"],
textarea  {
	/* width: 99%; */
}

/*
Solution 3: Short Way
*/
/* we can use the ":not" pseudo class */
/* 
Example:
like one single word without spaces or commas
input:not([type="radio"]):not([type="checkbox"])
*/
input:not([type="submit"]):not([type="reset"]), textarea {
    width: 99%;
}

/* Yes we can also use the ids for styling..... */

/* the container of input of type submit and reset is the div with class named buttons */
div.buttons {
    background-color: rgb(170, 170, 76);
    /*	
    Only use the two CSS3 properties to layout the buttons:
    - display: flex (CSS3) - inline-block (CSS3) and inline (CSS2) and block (CSS2)
    - justify-content: 
    > flex-start, flex-end
    > center, space-around 
    > space-evenly
    > space-between

    so we need to apply the these two new CSS3 rules to the container element
    (not the element(s) that we need to centre but its direct container)
    */

    /* Step 1: use CSS3 property new value for display called "flex" */
    display:flex;
    /* Step 2: use CSS# property "justify-content" */
    justify-content: space-evenly;
}

/* 
Style the input elements inside the div.buttons:
*/

div.buttons input {
    width: 100px;
    margin: 5px;
    background-color: #573304;
    color: #F3E7B6;
    font-weight: bold;
  }

/* 
- Change their (the submit and reset buttons) colors 
- and the mouse pointer on hovering over them?
we used a:hover, but we can use :hover with any element also: */
div.buttons input:hover {
    background-color: #F3E7B6;
    color: #573304;
    cursor: pointer;
}



/* style the footer element */
/* 
since section and aside are no longer block elements
so they will not take their normal space as block elements, for this reason the footer element will be moved to the top to be beside the aside or beside the 
section depending on their contents
*/
footer {
    /*	clear any element from the both sides of the footer */
    clear: both; /* to fix the issue with floating property for the element above */
    background-color: #705B5B;
    color: #E3D5D5;
    padding: 3px 0;
    text-align: center;
}

  
/* ************** Styling only the projects page ********************** */
/* style the div with class="samples" which is the container of all figure elements */
div.samples {
    /*	for testing: */
    background-color: lightgreen; 
    border: 1px inset rgb(124, 112, 4);
    border-top: none;
    border-radius: 10px;

    /*
    each image size is 200px => total of 3 images is 600px
      
    Plus margins and paddings and borders 
    => + 30px for margin + 30px for padding  + 12px for border 
    => the final total is 672px 
    */
    width: 672px;
    /* for 3 images ==> 600px
  but we still have 55 px for margins
    */
    margin: 10px auto;
    
    /* the other solution:
    we need to use a property named "overflow" to solve the issue with floating children
    because all the figure elements will have no width and height
    after making them floating to the left.
  
    since there is no height property we can use auto or hidden */
     /* 
     auto or hidden: 
     NOTE: Remember that "overflow" and "float" will NOT work with "display" 
     */

    overflow: auto;
    /* this will affect all the div.samples */
}

/* 
Style each figure element inside the div.samples
figure/figcaption are block-level
*/

div.samples h3 {
    text-align: center;
    background: rgb(23, 49, 1);
    color:rgb(245, 226, 226);
    margin-top:0;
}

div.samples figure {
    background-color: #e9e9d0;
    border: 2px solid #36270F;
    margin: 5px;
    padding: 5px;

    /* 
    Layout them horizontally:
    display: inline-block;
    OR:
    float: left;
    */
    /* display: inline-block; */

    /* Using the floating options */
    float: left; /* to disable the block-level */
    /* 
    be careful with this way we need to add the property 
    overflow to its parent element (the direct container)

    But if we use "display: inline-block;" instead of "float:left;" 
    this will work fine without adding overflow to its parent 
    */ 

    /* In this case using display: inline-block will be better */
    /* display: inline-block; */

    /* 
    we can put the following two rules for styling the text here 
    because figure is the parent of figcaption and all these properties can be inherited : 
  
    text-align: center;
    font-weight: bold;
    
    But we will put them inside figcaption selector
    because figcaption contains the text (makes more sense)
    */
}

div.samples figcaption {
    /* To centre the figcaption text */
	text-align: center;
	/* To make it bold */
	font-weight: bold;
	/* To make 90% of the original font size which is 100% */
	font-size: 90%;
}

.clear-div {
    clear: both;
  }

